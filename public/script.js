// public/script.js

// --- Helper Functions ---
const formatDate = (dateString) => { if (!dateString) return 'N/A'; const options = { year: 'numeric', month: 'long', day: 'numeric' }; try { const date = new Date(dateString + 'T00:00:00Z'); if (isNaN(date.getTime())) { console.warn("Invalid date:", dateString); return 'Invalid Date'; } return date.toLocaleDateString(undefined, options); } catch (e) { console.error("Err format date:", dateString, e); return 'Error Date'; } };
const formatTime = (timeString) => { if (!timeString) return ''; try { const [hour, minute] = timeString.split(':'); const hourNum = parseInt(hour, 10); if (isNaN(hourNum) || isNaN(parseInt(minute, 10)) || hourNum < 0 || hourNum > 23) { console.warn("Invalid time:", timeString); return 'Invalid Time'; } const ampm = hourNum >= 12 ? 'PM' : 'AM'; const formattedHour = hourNum % 12 === 0 ? 12 : hourNum % 12; return `${formattedHour}:${minute.padStart(2, '0')} ${ampm}`; } catch (e) { console.error("Err format time:", timeString, e); return 'Error Time'; } };
const formatPrice = (price) => { if (price === null || price === undefined || isNaN(price)) { return 'N/A'; } if (price === 0) { return 'Free'; } try { const numericPrice = Number(price); if (isNaN(numericPrice)){ console.warn("Price NaN:", price); return 'Invalid Price'; } return numericPrice.toLocaleString('en-US', { style: 'currency', currency: 'USD' }); } catch (e) { console.error("Err format price:", price, e); return 'Error Price'; } };

// --- Global Variables ---
let stripe;
const stripePublishableKey = "pk_test_51RA05WDGpvpMLjSoyT9MVhRTdXiuPuYPgjSdLFDenwKbKkQX0niJWWMHo1ILmWaxv4G50x1nAl2GOi856O7TVyiA00DltAfnqm";

// --- Main Event Listener ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOMContentLoaded event fired.");
    try { if (stripePublishableKey && typeof Stripe === 'function') { stripe = Stripe(stripePublishableKey); console.log("Stripe.js initialized."); } else if (typeof Stripe !== 'function'){ console.error("Stripe() func not found!"); } else { console.warn("Stripe Key missing."); } } catch (e) { console.error("Error initializing Stripe:", e); }
    const mobileMenuButton = document.getElementById('mobile-menu-button'); const mobileMenu = document.getElementById('mobile-menu'); const currentYearSpan = document.getElementById('current-year');
    if (currentYearSpan) { currentYearSpan.textContent = new Date().getFullYear(); } if (mobileMenuButton && mobileMenu) { mobileMenuButton.addEventListener('click', () => { mobileMenu.classList.toggle('hidden'); }); }
    const eventListElement = document.getElementById('event-list'); const eventContentElement = document.getElementById('event-content'); const searchResultsElement = document.getElementById('search-results-list');
    console.log("Checking for page-specific elements:", { '#event-list exists': !!eventListElement, '#event-content exists': !!eventContentElement, '#search-results-list exists': !!searchResultsElement });
    if (eventListElement) { console.log("Homepage detected. Running fetchEventsForHomePage..."); fetchEventsForHomePage(); checkApplicationStatus(); }
    if (eventContentElement) { console.log("Event Details Page detected. Running fetchEventDetails..."); fetchEventDetails(); checkPurchaseStatus(); }
    else { if (window.location.pathname.includes('/events/')) { console.error("On an event URL, but #event-content element was NOT FOUND!"); } }
    if (searchResultsElement) { console.log("Search Results Page detected. Running handleSearchResultsPage..."); handleSearchResultsPage(); }
});

// --- Data Fetching & DOM Functions ---
async function fetchEventsForHomePage() {
    console.log("fetchEventsForHomePage: Function called.");
    const eventListContainer = document.getElementById('event-list'); const loadingIndicator = document.getElementById('loading-events');
    console.log("fetchEventsForHomePage: Element check - eventListContainer:", eventListContainer ? 'Found' : 'MISSING!'); console.log("fetchEventsForHomePage: Element check - loadingIndicator:", loadingIndicator ? 'Found' : 'MISSING!');
    if (!eventListContainer || !loadingIndicator) { console.error("fetchEventsForHomePage: Critical element(s) missing. Aborting."); if(eventListContainer) eventListContainer.innerHTML = '<p class="text-red-500 col-span-full">Page error: Elements missing.</p>'; return; }
    console.log("fetchEventsForHomePage: Elements confirmed. Entering try block...");
    try {
        if (loadingIndicator && loadingIndicator.style) { console.log("fetchEventsForHomePage: Setting loadingIndicator display to block."); loadingIndicator.style.display = 'block'; }
        else { console.error("fetchEventsForHomePage: loadingIndicator invalid before setting style!"); if(eventListContainer) eventListContainer.innerHTML = '<p class="text-red-500 col-span-full">Page error: Indicator invalid.</p>'; return; }
        console.log("fetchEventsForHomePage: Fetching /api/events...");
        const response = await fetch('/api/events'); console.log("fetchEventsForHomePage: Received response for /api/events, Status:", response.status);
        if (!response.ok) { let errorMsg = `Failed to load events. Server responded with status ${response.status}`; try { const errorData = await response.json(); errorMsg = errorData.error || errorMsg; console.log("fetchEventsForHomePage: Parsed error response:", errorData); } catch (e) { console.log("fetchEventsForHomePage: Response was not JSON."); } throw new Error(errorMsg); }
        const events = await response.json(); console.log("fetchEventsForHomePage: Parsed events data:", events);
        if (loadingIndicator && loadingIndicator.style) { loadingIndicator.style.display = 'none'; } eventListContainer.innerHTML = '';
        if (!Array.isArray(events)) { console.error("fetchEventsForHomePage: Invalid data format - not an array:", events); throw new Error("Invalid data format received."); }
        if (events.length === 0) { console.log("fetchEventsForHomePage: No events found. Displaying message."); eventListContainer.innerHTML = '<p class="text-center text-gray-500 col-span-full">No upcoming events found.</p>'; return; }
        console.log(`WorkspaceEventsForHomePage: Rendering ${events.length} events.`); const eventsToShow = events.slice(0, 6);
        eventsToShow.forEach(event => { const eventName = event.name || 'Unnamed Event'; const imageUrl = event.imageUrl || 'https://via.placeholder.com/400x250/cccccc/969696?text=Event'; const eventDate = formatDate(event.date); const eventTime = event.time ? ' - ' + formatTime(event.time) : ''; const eventVenue = event.venue || 'Venue TBD'; const eventCity = event.city || 'City TBD'; const eventState = event.state || ''; const card = `<div class="event-card bg-white rounded-lg shadow-md overflow-hidden transform transition duration-300 hover:scale-105 opacity-0 event-card-loaded"><img src="${imageUrl}" alt="${eventName}" class="w-full h-48 object-cover"><div class="p-6"><h3 class="text-xl font-semibold mb-2 truncate" title="${eventName}">${eventName}</h3><p class="text-gray-600 text-sm mb-1"><time datetime="${event.date || ''}T${event.time || '00:00'}">${eventDate}${eventTime}</time></p><p class="text-gray-500 text-sm mb-4 truncate">${eventVenue}, ${eventCity}, ${eventState}</p><a href="/events/${event.id}" class="text-blue-600 hover:text-blue-800 font-medium transition duration-300">View Details &rarr;</a></div></div>`; eventListContainer.insertAdjacentHTML('beforeend', card); });
        console.log("fetchEventsForHomePage: Finished rendering event cards.");
    } catch (error) { console.error("CRITICAL ERROR in fetchEventsForHomePage try block:", error); if (loadingIndicator && loadingIndicator.style) { loadingIndicator.style.display = 'none'; } if(eventListContainer) { eventListContainer.innerHTML = `<p class="text-center text-red-600 font-bold col-span-full">ERROR LOADING EVENTS:<br>${error.message || 'Unknown fetch error. Check console.'}</p>`; } }
}
async function fetchEventDetails() {
    console.log("fetchEventDetails: Function started."); const eventContent = document.getElementById('event-content'); const loadingIndicator = document.getElementById('loading-event'); const notFoundMessage = document.getElementById('event-not-found'); const purchaseSection = document.getElementById('purchase-section'); const ticketsUnavailableMsg = document.getElementById('tickets-unavailable'); const purchaseForm = document.getElementById('purchase-form'); const purchaseButton = document.getElementById('purchase-button'); const purchaseMessage = document.getElementById('purchase-message');
    if (!eventContent || !loadingIndicator || !notFoundMessage || !purchaseSection || !ticketsUnavailableMsg || !purchaseForm || !purchaseButton || !purchaseMessage) { console.error("fetchEventDetails: Required DOM elements not found. Aborting."); return; }
    const pathParts = window.location.pathname.split('/'); const eventId = pathParts[pathParts.length - 1]; console.log("fetchEventDetails: Extracted Event ID:", eventId);
    if (!eventId || isNaN(parseInt(eventId))) { console.error("fetchEventDetails: Invalid Event ID."); loadingIndicator.style.display = 'none'; notFoundMessage.classList.remove('hidden'); document.body.style.opacity = 1; return; }
    try {
        loadingIndicator.style.display = 'block'; console.log(`WorkspaceEventDetails: Fetching /api/events/${eventId}...`); const response = await fetch(`/api/events/${eventId}`); console.log(`WorkspaceEventDetails: Received response for /api/events/${eventId}, Status:`, response.status);
        if (!response.ok) { let errorMsg = `Failed to load event details. Server responded with status ${response.status}`; try{ const errorData = await response.json(); errorMsg = errorData.error || errorMsg; console.log("fetchEventDetails: Parsed error response:", errorData); } catch(e){ console.log("fetchEventDetails: Response not JSON on error."); } if (response.status === 404) { console.log("fetchEventDetails: Event not found (404)."); loadingIndicator.style.display = 'none'; notFoundMessage.classList.remove('hidden'); } else { throw new Error(errorMsg); } document.body.style.opacity = 1; return; }
        const event = await response.json(); console.log("fetchEventDetails: Parsed event data:", event);
        if (!event || typeof event !== 'object') { console.error("fetchEventDetails: Invalid data format received:", event); throw new Error("Invalid data format received from server."); }
        console.log("fetchEventDetails: Populating DOM elements..."); document.title = `${event.name || 'Event'} - Ticket Evolution`; document.getElementById('event-name').textContent = event.name || 'Event Name'; document.getElementById('event-date').textContent = formatDate(event.date); document.getElementById('event-time').textContent = formatTime(event.time); document.getElementById('event-venue').textContent = event.venue || 'N/A'; document.getElementById('event-location').textContent = `${event.city || 'City'}, ${event.state || 'State'}`; document.getElementById('event-price').textContent = formatPrice(event.ticketPrice); document.getElementById('event-availability').textContent = event.ticketsAvailable > 0 ? `${event.ticketsAvailable}` : 'Sold Out'; document.getElementById('event-description').textContent = event.description || 'No description provided.'; document.getElementById('event-image').src = event.imageUrl || 'https://via.placeholder.com/400x300/cccccc/969696?text=Event'; document.getElementById('event-image').alt = event.name || 'Event Image'; console.log("fetchEventDetails: DOM elements populated.");
        const ticketsAvailableNum = parseInt(event.ticketsAvailable, 10); console.log("fetchEventDetails: Checking purchase section conditions..."); console.log("fetchEventDetails: Stripe initialized?", !!stripe); console.log("fetchEventDetails: Tickets available (parsed):", ticketsAvailableNum);
        if (!stripe) { console.warn("fetchEventDetails: Stripe not initialized. Purchase section hidden."); if (purchaseSection) purchaseSection.classList.add('hidden'); if (ticketsUnavailableMsg) { if (ticketsAvailableNum > 0) { ticketsUnavailableMsg.innerHTML = `<p class="text-lg font-semibold text-orange-600">Payment processing failed to initialize.</p>`; } ticketsUnavailableMsg.classList.remove('hidden'); } }
        else if (!isNaN(ticketsAvailableNum) && ticketsAvailableNum > 0) { console.log("fetchEventDetails: Conditions met. Showing purchase section and adding listener."); purchaseSection.classList.remove('hidden'); purchaseSection.classList.add('visible'); ticketsUnavailableMsg.classList.add('hidden'); const quantityInput = document.getElementById('quantity'); quantityInput.max = ticketsAvailableNum; purchaseButton.replaceWith(purchaseButton.cloneNode(true)); const newPurchaseButton = document.getElementById('purchase-button'); newPurchaseButton.addEventListener('click', async (e) => { e.preventDefault(); console.log("Purchase button clicked."); const quantity = document.getElementById('quantity')?.value; const name = document.getElementById('purchaserName')?.value; const email = document.getElementById('purchaserEmail')?.value; if (!quantity || parseInt(quantity) <= 0 || !name || !email) { purchaseMessage.innerHTML = `<p class="text-red-600">Fill all fields.</p>`; return; } purchaseMessage.innerHTML = `<p class="text-blue-600">Processing...</p>`; newPurchaseButton.disabled = true; try { console.log("fetchEventDetails: Calling /create-checkout-session..."); const fetchResponse = await fetch('/create-checkout-session', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({ eventId: eventId, quantity: quantity }) }); console.log("fetchEventDetails: /create-checkout-session response status:", fetchResponse.status); if (!fetchResponse.ok) { const errorData = await fetchResponse.json(); throw new Error(errorData.error || `Server error: ${fetchResponse.status}`); } const session = await fetchResponse.json(); console.log("fetchEventDetails: Received session ID, redirecting to Stripe Checkout:", session.id); const result = await stripe.redirectToCheckout({ sessionId: session.id }); if (result.error) { console.error("Stripe redirectToCheckout error:", result.error.message); purchaseMessage.innerHTML = `<p class="text-red-600">Error: ${result.error.message}</p>`; newPurchaseButton.disabled = false; } } catch (error) { console.error('Purchase Error:', error); purchaseMessage.innerHTML = `<p class="text-red-600">Could not initiate purchase: ${error.message}</p>`; newPurchaseButton.disabled = false; } }); }
        else { console.log("fetchEventDetails: No tickets available. Hiding purchase section."); if (purchaseSection) purchaseSection.classList.add('hidden'); if (ticketsUnavailableMsg) ticketsUnavailableMsg.classList.remove('hidden'); }
        loadingIndicator.style.display = 'none'; notFoundMessage.classList.add('hidden'); eventContent.classList.remove('hidden'); document.body.style.opacity = 1; console.log("fetchEventDetails: Page rendering complete.");
    } catch (error) { console.error("CRITICAL ERROR in fetchEventDetails try block:", error); if (loadingIndicator && loadingIndicator.style) { loadingIndicator.style.display = 'none'; } if(eventContent && eventContent.parentNode) { eventContent.parentNode.innerHTML = `<p class="text-center text-red-600 font-bold p-10">ERROR LOADING EVENT DETAILS:<br>${error.message || 'Unknown error. Check console.'}</p>`; } document.title = "Error Loading Event"; document.body.style.opacity = 1; }
}
async function handleSearchResultsPage() {
    console.log("handleSearchResultsPage: Function called."); const resultsContainer = document.getElementById('search-results-list'); const loadingIndicator = document.getElementById('loading-search-results'); const heading = document.getElementById('search-results-heading'); const searchInputHeader = document.getElementById('search-input-header');
    if (!resultsContainer || !loadingIndicator || !heading) { console.error("handleSearchResultsPage: Missing required elements."); return; } const urlParams = new URLSearchParams(window.location.search); const query = urlParams.get('q');
    if (!query) { heading.textContent = 'Please enter a search term.'; loadingIndicator.style.display = 'none'; resultsContainer.innerHTML = ''; return; }
    const decodedQuery = decodeURIComponent(query); heading.textContent = `Search Results for: "${decodedQuery}"`; document.title = `Search: ${decodedQuery} - Ticket Evolution`; if (searchInputHeader) { searchInputHeader.value = decodedQuery; } loadingIndicator.style.display = 'block'; resultsContainer.innerHTML = '';
    try {
        console.log(`handleSearchResultsPage: Fetching /api/events/search?q=${query}`); const response = await fetch(`/api/events/search?q=${encodeURIComponent(query)}`); console.log(`handleSearchResultsPage: Received response, Status: ${response.status}`);
        if (!response.ok) { let errorMsg = `Search failed. Status: ${response.status}`; try{ const errorData = await response.json(); errorMsg = errorData.error || errorMsg; } catch(e){} throw new Error(errorMsg); } const events = await response.json(); console.log("handleSearchResultsPage: Parsed data:", events);
        loadingIndicator.style.display = 'none'; if (!Array.isArray(events)) { throw new Error("Invalid data format."); }
        if (events.length === 0) { console.log("handleSearchResultsPage: No results found."); resultsContainer.innerHTML = `<p class="text-center text-gray-500 col-span-full">No events found matching your search criteria.</p>`; return; }
        console.log(`handleSearchResultsPage: Rendering ${events.length} results.`); events.forEach(event => { const card = `<div class="event-card bg-white rounded-lg shadow-md overflow-hidden transform transition duration-300 hover:scale-105 opacity-0 event-card-loaded"><img src="${event.imageUrl || 'https://via.placeholder.com/400x250/cccccc/969696?text=Event'}" alt="${event.name || 'Event image'}" class="w-full h-48 object-cover"><div class="p-6"><h3 class="text-xl font-semibold mb-2 truncate" title="${event.name || ''}">${event.name || 'Event Name'}</h3><p class="text-gray-600 text-sm mb-1"><time datetime="${event.date || ''}T${event.time || '00:00'}">${formatDate(event.date)} ${event.time ? ' - ' + formatTime(event.time) : ''}</time></p><p class="text-gray-500 text-sm mb-4 truncate">${event.venue || 'Venue'}, ${event.city || 'City'}, ${event.state || 'State'}</p><a href="/events/${event.id}" class="text-blue-600 hover:text-blue-800 font-medium transition duration-300">View Details &rarr;</a></div></div>`; resultsContainer.insertAdjacentHTML('beforeend', card); });
    } catch (error) { console.error("Error fetching/rendering search results:", error); loadingIndicator.style.display = 'none'; resultsContainer.innerHTML = `<p class="text-center text-red-500 col-span-full">Could not load search results: ${error.message}</p>`; }
}
function checkApplicationStatus() { try { const urlParams = new URLSearchParams(window.location.search); if (urlParams.get('status') === 'applied') { const successMessage = document.createElement('div'); successMessage.className = 'container mx-auto px-6 py-4 bg-green-100 border border-green-300 text-green-800 rounded-md my-4 transition duration-500 ease-out'; successMessage.textContent = 'Event application submitted.'; successMessage.setAttribute('role', 'alert'); const header = document.querySelector('header'); if (header && header.parentNode) { header.parentNode.insertBefore(successMessage, header.nextSibling); setTimeout(() => { successMessage.style.opacity = '0'; setTimeout(() => successMessage.remove(), 500); }, 5000); window.history.replaceState({}, document.title, window.location.pathname); } } } catch(e) { console.error("Err app status:", e); } }
function checkPurchaseStatus() { try { const urlParams = new URLSearchParams(window.location.search); const messageContainer = document.getElementById('purchase-message'); if (urlParams.get('status') === 'purchased' && messageContainer) { messageContainer.innerHTML = `<div class="bg-green-100 border border-green-300 text-green-800 px-4 py-3 rounded relative mb-4" role="alert"><strong class="font-bold">Success!</strong> <span class="block sm:inline"> Request received (Demo).</span></div>`; window.history.replaceState({}, document.title, window.location.pathname); } else if (urlParams.get('status') === 'cancelled' && messageContainer){ messageContainer.innerHTML = `<div class="bg-yellow-100 border border-yellow-300 text-yellow-800 px-4 py-3 rounded relative mb-4" role="alert"><strong class="font-bold">Cancelled:</strong> <span class="block sm:inline"> Your purchase was cancelled.</span></div>`; window.history.replaceState({}, document.title, window.location.pathname); } } catch(e) { console.error("Err purchase status:", e); } }
